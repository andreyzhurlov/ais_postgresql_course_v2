
---------------------------------------------------------------------------------
-- Агрегации и группировки
---------------------------------------------------------------------------------


-- 6
select avg(salary),
       max(salary),
       min(salary),
       sum(salary)
from   employees
where  job_id like '%REP%';

-- 7
select min(hire_date),
       max(hire_date)
from   employees;

-- 8
select count(*)
from   employees
where  department_id = 50;

select count(commission_pct)
from   employees
where  department_id = 50;

-- 9
select count(distinct department_id)
from   employees;

-- 10
select avg(commission_pct)
from   employees;

select avg(coalesce(commission_pct, 0))
from   employees;

-- 13
select department_id,
       avg(salary)
from   employees
group  by department_id;

-- 14
select avg(salary)
from   employees
group  by department_id;

-- 16
select department_id,
       job_id,
       sum(salary)
from   employees
where  department_id > 40
group  by department_id,
          job_id
order  by department_id;

-- 17
select department_id,
       count(last_name)
from   employees;

select department_id as dpt,
       count(last_name)
from   employees
group  by dpt;

select department_id,
       job_id,
       count(last_name)
from   employees
group  by department_id;

-- 18
select department_id,
       avg(salary)
from   employees
where  avg(salary) > 8000
group  by department_id;

-- 21
select department_id,
       max(salary)
from   employees
group  by department_id
having max(salary) > 10000;

-- 22
select job_id,
       sum(salary) PAYROLL
from   employees
where  job_id not like '%REP%'
group  by job_id
having sum(salary) > 13000
order  by payroll;

select job_id,
       sum(salary) PAYROLL
from   employees
where  job_id not like '%REP%'
group  by job_id
having sum(salary) > 13000
order  by sum(salary);

-- 23
select max(avg(salary))
from   employees
group  by department_id;



---------------------------------------------------------------------------------
-- VIEW
---------------------------------------------------------------------------------



-- 49
create view	hr.empvu80
 as select  employee_id, last_name, salary
    from    employees
    where   department_id = 80;
	
SELECT * FROM hr.empvu80
-- 50
create view	salvu50
 as select  employee_id ID_NUMBER, last_name as name,
            salary*12 ANN_SALARY
    from    employees
    where   department_id = 50;

SELECT * FROM hr.salvu50
-- 51
select * from   salvu50;

-- 52
drop view empvu80;

create or replace view empvu80(
	id_number, 
    name, 
	sal, 
	department_id
)
as select   employee_id, 
			first_name || ' ' || last_name, 
			salary, 
			department_id
     from  employees
    where  department_id = 80;


select * from  employees where employee_id = 190;

select * from  employees where employee_id = 150;

update employees
  set salary = 10000
where employee_id = 150;

-- 53
CREATE OR REPLACE VIEW hr.dept_sum_vu(
	name, 
	minsal, 
	maxsal, 
	avgsal
)
as select   d.department_name, 
			MIN(e.salary), 
            MAX(e.salary),
			AVG(e.salary)
	from employees e 
	join departments d
      on (e.department_id = d.department_id)
   group by d.department_name;
   
 SELECT * FROM hr.dept_sum_vu




---------------------------------------------------------------------------------
-- Оконные функции
---------------------------------------------------------------------------------

-- Задача: накопительная сумма заказов клиента по дате:
-- Вычисляет сумму всех заказов клиента от самого первого до текущего.
SELECT
    client_id,
    order_date,
    order_ammount,
    SUM(order_ammount) OVER (
        PARTITION BY client_id
        ORDER BY order_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total
FROM dev.orders;



-- Задача: средняя сумма заказа за последние 3 строки по каждому клиенту:
-- Подсчитывает среднюю сумму для окна из текущей и двух предыдущих строк.
SELECT
    client_id,
    order_date,
    order_ammount,
    AVG(order_ammount) OVER (
        PARTITION BY client_id
        ORDER BY order_date
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS rolling_avg
FROM dev.orders;



-- Задача: для каждого заказа показать наименьший и наибольший заказ клиента:
-- Это помогает анализировать динамику покупок: выросли или упали ли суммы заказов.
SELECT
    client_id,
    order_date,
    order_ammount,
    MIN(order_ammount) OVER (
        PARTITION BY client_id
        ORDER BY order_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS min_order,
    MAX(order_ammount) OVER (
        PARTITION BY client_id
        ORDER BY order_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS max_order
FROM dev.orders;



-- COUNT(): Для каждого клиента посчитать, сколько клиентов в его городе (включая его самого).
SELECT
    id AS client_id,
    first_name,
    last_name,
    city,
    COUNT(*) OVER (PARTITION BY city) AS clients_in_city
FROM
    dev.clients;


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-- Показать номер заказа по дате для каждого клиента.
SELECT 
    client_id,
    order_date,
    ROW_NUMBER() OVER (PARTITION BY client_id ORDER BY order_date) AS order_rank
FROM dev.orders;



--  определить «топ» заказов по сумме
SELECT 
    client_id,
    order_ammount,
    RANK() OVER (PARTITION BY client_id ORDER BY order_ammount DESC) AS rank_by_amount
FROM dev.orders;



--  определить «топ» заказов по сумме
SELECT 
    client_id,
    order_ammount,
    DENSE_RANK() OVER (PARTITION BY client_id ORDER BY order_ammount DESC) AS rank_by_amount
FROM dev.orders;



-- Задача: показать сумму заказа и сразу применить все три оконные функции для каждого клиента.
SELECT 
    client_id,
    order_date,
    item_name,
    order_ammount,

    ROW_NUMBER() OVER (
        PARTITION BY client_id 
        ORDER BY order_ammount DESC
    ) AS row_num,

    RANK() OVER (
        PARTITION BY client_id 
        ORDER BY order_ammount DESC
    ) AS rank_pos,

    DENSE_RANK() OVER (
        PARTITION BY client_id 
        ORDER BY order_ammount DESC
    ) AS dense_rank_pos

FROM dev.orders;



/*

Задача:
Для каждого клиента и заказа вывести:

текущую сумму заказа,

сумму предыдущего заказа (с помощью LAG()),

сумму следующего заказа (с помощью LEAD()),
упорядочив по дате заказа.
*/
SELECT
    client_id,
    order_date,
    item_name,
    order_ammount,

    LAG(order_ammount) OVER (
        PARTITION BY client_id
        ORDER BY order_date
    ) AS prev_order_amount,

    LEAD(order_ammount) OVER (
        PARTITION BY client_id
        ORDER BY order_date
    ) AS next_order_amount

FROM dev.orders
ORDER BY client_id, order_date;




-- Найти самый первый заказ каждого клиента по дате:
SELECT *
FROM (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY client_id ORDER BY order_date) AS rn
    FROM dev.orders
) t
WHERE rn = 1;


--------------------------------------------------------------------------------
-- ROW_NUMBER() — Найти самого раннего нанятого сотрудника в каждом департаменте
SELECT *
FROM (
    SELECT
        employee_id,
        first_name,
        last_name,
        department_id,
        hire_date,
        ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY hire_date) AS rn
    FROM hr.employees
) t
WHERE rn = 1;



--------------------------------------------------------------------------------
-- RANK() — Ранжировать сотрудников по зарплате внутри департамента
-- Задача: понять, кто является самым высокооплачиваемым сотрудником в своём отделе, 
-- с учётом возможных одинаковых зарплат.
SELECT
    employee_id,
    first_name,
    last_name,
    department_id,
    salary,
    RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
FROM hr.employees;



--------------------------------------------------------------------------------
-- LAG() — Сравнение зарплаты с предыдущим сотрудником в департаменте
-- Задача: для каждого сотрудника показать зарплату предыдущего (по дате найма) в том же департаменте. 
-- Это позволяет отслеживать тренды в найме — растёт или падает зарплата новых сотрудников.
WITH salary_lagged AS (
    SELECT
        employee_id,
        first_name,
        last_name,
        department_id,
        salary,
        LAG(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_salary,
        hire_date
    FROM hr.employees
)

SELECT
    employee_id,
    first_name,
    last_name,
    department_id,
    salary,
    prev_salary,
    CASE 
        WHEN prev_salary IS NULL THEN 'N/A'
        WHEN salary > prev_salary THEN 'Higher'
        ELSE 'Not higher'
    END AS salary_trend
FROM salary_lagged
ORDER BY department_id, hire_date;