/*
Задание 3.
В каждом городе назначить ранг клиентам по сумме заказов,
включая одинаковые ранги при равных значениях.
>> Сумму заказа нужно считать с учётом всех товаров внутри него
*/
with cte_orders_sum as (
	select  o.client_id,
			sum(o.order_ammount) as order_ammount
	  from dev.orders o
	  group by client_id
),
cte_order_sum_city as (
	select  t2.city,
			t1.client_id,
			t1,order_ammount
	  from cte_orders_sum t1
	  join dev.clients t2
	    on t1.client_id = t2.id
)
select  city,
		client_id,
		order_ammount,
		DENSE_RANK() OVER(partition by city order by order_ammount DESC) as rn
 from cte_order_sum_city
 /*
Задание 4.
Для каждого клиента сравнить сумму заказа с предыдущим заказом по дате.
Отметить одним из трёх признаков: 'N/A', 'Higher', 'Not higher'
>> Сумум заказа нужно считать с учётом всех товаров внутри него
*/
with cte_orders_sum as (
	select  o.client_id,
			o.order_date,
			sum(o.order_ammount) as order_ammount
	  from dev.orders o
	  group by client_id, order_date
),
cte_orders_lagged AS (
   SELECT
       client_id,
       order_date,
       order_ammount,
       LAG(order_ammount) OVER (PARTITION BY client_id ORDER BY order_date) AS prev_order_ammount
   FROM cte_orders_sum
)
SELECT
   client_id,
   order_date,
   order_ammount,
   prev_order_ammount,
   CASE
       WHEN prev_order_ammount IS NULL THEN 'N/A'
       WHEN order_ammount > prev_order_ammount THEN 'Higher'
       ELSE 'Not higher'
   END as order_ammount_trend
FROM cte_orders_lagged;

